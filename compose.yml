services:
  auth-service-app:
    build: ./backend/auth-service/
    restart: on-failure:5
    environment:
      NODE_ENV: ${NODE_ENV}
      JWT_PRIVATE_KEY: ${JWT_PRIVATE_KEY}
      JWT_PUBLIC_KEY: ${JWT_PUBLIC_KEY}
      PG_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresdb:5432/${POSTGRES_DB}
    depends_on:
      - postgresdb

  upload-service-app:
    build: ./backend/upload-service/
    restart: on-failure:5
    environment:
      NODE_ENV: ${NODE_ENV}
      JWT_PUBLIC_KEY: ${JWT_PUBLIC_KEY}
      PG_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresdb:5432/${POSTGRES_DB}
      REGION: ${REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET: ${S3_BUCKET}
      KAFKA_BROKER: kafka:${KAFKA_PORT}
      KAFKA_VIDEO_RESOLUTION_TOPIC: ${KAFKA_VIDEO_RESOLUTION_TOPIC}
      KAFKA_VIDEO_SEARCH_INDEX_TOPIC: ${KAFKA_VIDEO_SEARCH_INDEX_TOPIC}
    depends_on:
      - postgresdb
      - kafka

  search-service-app:
    build: ./backend/search-service/
    restart: on-failure:5
    environment:
      NODE_ENV: ${NODE_ENV}
      JWT_PUBLIC_KEY: ${JWT_PUBLIC_KEY}
      PG_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresdb:5432/${POSTGRES_DB}
      ELASTICSEARCH_NODE: http://elasticsearch:${ELASTICSEARCH_CLIENT_PORT}
      ELASTICSEARCH_INDEX: videos
    depends_on:
      - postgresdb
      - elasticsearch

  video-resolution-processing-service:
    build: ./backend/video-processing-service/
    restart: on-failure:5
    environment:
      PG_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresdb:5432/${POSTGRES_DB}
      REGION: ${REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET: ${S3_BUCKET}
      KAFKA_BROKER: kafka:${KAFKA_PORT}
      KAFKA_TOPIC: ${KAFKA_VIDEO_RESOLUTION_TOPIC}
    depends_on:
      - postgresdb
      - kafka

  video-search-index-processing-service:
    build: ./backend/video-search-index-processing-service/
    restart: on-failure:5
    environment:
      NODE_ENV: ${NODE_ENV}
      KAFKA_BROKER: kafka:${KAFKA_PORT}
      KAFKA_TOPIC: ${KAFKA_VIDEO_SEARCH_INDEX_TOPIC}
      ELASTICSEARCH_NODE: http://elasticsearch:${ELASTICSEARCH_CLIENT_PORT}
      ELASTICSEARCH_INDEX: videos
    depends_on:
      - kafka
      - elasticsearch

  api-gateway:
    build: ./frontend/
    ports:
      - 8080:80
    depends_on:
      - auth-service-app
      - upload-service-app
      - search-service-app
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro

  postgresdb:
    image: postgres:alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./initdb/:/docker-entrypoint-initdb.d

  kafka:
    image: apache/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: CONTROLLER://localhost:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:${KAFKA_PORT}
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:${KAFKA_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.1
    ports:
      - "9200:${ELASTICSEARCH_CLIENT_PORT}"
      - "9300:${ELASTICSEARCH_INTERNAL_PORT}"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - es-data:/usr/share/elasticsearch/data

volumes:
  db-data:
  es-data:
